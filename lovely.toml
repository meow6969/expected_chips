[manifest]
version = "0.0.1 ~1"

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "timer_checkpoint('debug', 'draw')"
position = "before"
payload = '''
print(G.expected_chips)
if G.expected_chips ~= -1 and G.expected_chips ~= nil and G.hand ~= nil and G.hand.highlighted ~= nil and #G.hand.highlighted > 0 then
    if G.expected_chips_font == nil then
        G.expected_chips_font = love.graphics.newFont("resources/fonts/m6x11plus.ttf", 40)
    end
    local expected_chips_text = tostring(G.expected_chips)
    if G.expected_chips ~= -2 then
        for i=string.len(expected_chips_text) - 3,1,-3 do
            expected_chips_text = expected_chips_text:sub(1,i)..","..expected_chips_text:sub(i+1)
        end
        expected_chips_text = "Expected Chips: "..expected_chips_text
    else
        expected_chips_text = "Expected Chips: ???"
    end
    local expected_chips_text = love.graphics.newText(G.expected_chips_font, {{255, 0, 255}, expected_chips_text})
    love.graphics.draw(expected_chips_text, 120, 20)
end
'''
match_indent = true
times = 1


# this removes the expected chips delay after a hand is played
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.evaluate_play = function(e)"
position = "after"
payload = "    G.expected_chips = -1"
times = 1
match_indent = true


# this calculates the expected chips when a card is clicked
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.area and self.area == G.deck and self.area.cards[1] == self then "
position = "before"
payload = "G.expected_chips = G.FUNCS.evaluate_play_expected_chips()"
times = 1
match_indent = true


# this calculates the expected chips when a card starts to be dragged
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "if self.cursor_down.target.states.drag.can then"
position = "after"
payload = "    G.expected_chips = G.FUNCS.evaluate_play_expected_chips()"
times = 1
match_indent = true


# this calculates the expected chips when a card stops being dragged
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "if self.dragging.target then"
position = "after"
payload = "G.expected_chips = G.FUNCS.evaluate_play_expected_chips()"
times = 1
match_indent = true


[[patches]]
[patches.copy]
target = "card.lua"
position = "append"
sources = [
    "card_calculate_joker_chips.lua"
]


[[patches]]
[patches.copy]
target = "functions/state_events.lua"
position = "append"
sources = [
    "state_events_evaluate_play_expected_chips.lua"
]

